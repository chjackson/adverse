
# Arm-level effect estimate (given a one-row data frame)
# Returns mean, standard deviation.
mtc.arm.mle.cjbinom.logit <- function(data, k=0.5) {
  s <- unname(data['responders'] + k)
  f <- unname(data['sampleSize'] - s + 2 * k)
  c('mean'=log(s/f), 'sd'=sqrt(1/s + 1/f))
}

# Relative effect estimate (given a two-row data frame)
mtc.rel.mle.cjbinom.logit <- function(data, correction.force=TRUE, correction.type="constant", correction.magnitude=1) {
  correction <- gemtc:::correction.counts(data, correction.force, correction.type, correction.magnitude)

  e1 <- mtc.arm.mle.cjbinom.logit(data[1,], k=correction[1])
  e2 <- mtc.arm.mle.cjbinom.logit(data[2,], k=correction[2])

  c(e2['mean'] - e1['mean'], sqrt(e1['sd']^2 + e2['sd']^2))
}

mtc.code.likelihood.cjbinom.logit <- function(powerAdjust) {
  paste("logit(p[i, k]) <- $armLinearModel$", gemtc:::likelihood.code.binom[powerAdjust + 1], sep="\n")
}

fitted.values.parameter.cjbinom.logit <- gemtc:::fitted.values.parameter.binom
deviance.cjbinom.logit <- gemtc:::deviance.binom

scale.log.cjbinom.logit <- function() { TRUE }
scale.name.cjbinom.logit <- function() { "Odds Ratio" }

# Initial values outside this range result in probability 0 or 1 for the
# binomial, which may lead to BUGS/JAGS rejecting the data
inits.info.cjbinom.logit <- function() {
  list(
    limits=c(-745, 36.8),
    param='mu',
    transform=identity)
}

required.columns.ab.cjbinom.logit <- gemtc:::required.columns.counts
validate.data.cjbinom.logit <- gemtc:::validate.data.counts

## Control response rate in study i plus risk of actual baseline trt rel to control 

study.baseline.priors.cjbinom.logit <- function() {
"for (i in studies.a) {
  mu[i] <- bstudy[i] + d[1, t[i,1]]
  bstudy[i] ~ dnorm(mumu, mutau)
}
bstudy.rep ~ dnorm(mumu, mutau)
for (i in 1:nt){
  btrt[i] <- mumu + d[1, i]
  btrt.pred[i] <- bstudy.rep + d[1, i]
}
mumu ~ dnorm(0, 10)
mutau ~ dlnorm(-3, 5)
"
}

add.monitors.cjbinom.logit <- function(model) {
    nt <- model$data$nt
    extras <- c("mumu", "mutau",
                sprintf("btrt[%d]",1:nt),
                sprintf("btrt.pred[%d]",1:nt),
                sprintf("d[%d,%d]", rep(1:nt, nt), rep(1:nt, each=nt))
                )
    model$monitors$available <- c(model$monitors$available, extras)
    model$monitors$enabled <- c(model$monitors$enabled, extras)
    for (i in 1:model$n.chain){ 
        model$inits[[i]]$mu <- NULL
        model$inits[[i]]$mumu <- 0
        model$inits[[i]]$mutau <- 1
    }
    model
}
